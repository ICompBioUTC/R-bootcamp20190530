library(NOISeq)
library(gplots)
install.packages("gplots")
?Reduce
setwd("~/GoogleDriveCNB331/courses.gd/_CPSC4999/2.lectures/6.fraser.paper/PIN.KaKs")
rm(list=ls())
set.seed(2017)
source('network.r')
setwd("~/GoogleDriveCNB331/courses.gd/_CPSC4999/2.lectures/6.fraser.paper/PIN.KaKs")
rm(list=ls())
set.seed(2017)
source('network.r')
rm(list=ls())
set.seed(2017)
source('network.r')
list.files()
source(network.r)
rm(list=ls())
set.seed(2017)
source("network.r")
rm(list=ls())
set.seed(2017)
source("network.r")
setwd("~/GoogleDriveCNB331/courses.gd/_CPSC4999/2.lectures/6.fraser.paper/PIN.KaKs")
rm(list=ls())
set.seed(2017)
source('network.r')
#input evolutionary distances
Kdata = read.csv( "Sce.Spa.KaKs.csv");
#input protein interaction pairs
pairs = read.csv("pairs.csv");
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
#input growth fitness
fit = read.csv("growth.fitness.hom.csv");
fit$orf = as.character( fit$orf );
#calculate connecting degrees
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
# summarize the results in a dataframe 'net'
net = data.frame(degree);
str(net);
net$id = as.character( net$id);
#double check
intersect( net$id, Kdata$orfname) [1:10];
#match data and net
Kdata$degree = net$Freq[match(Kdata$orfname, net$id )]
#visual examination to double the merged results
head(Kdata)
net[net$id=='YAL005C', ]
net[net$id=='YAL012W', ]
# find out correlation bw degree and Omega, Ka, Ks
summary(lm(Kdata$Ka ~ Kdata$degree))
#match data and fitness
Kdata$YPD = fit$YPD[match(Kdata$orfname, fit$orf)]
#visual check the merge results
fit[fit$orf=='YAL007C',]
summary(lm(Kdata$Ka ~ Kdata$YPD))
summary(lm(Kdata$degree ~ Kdata$YPD))
summary(lm( log(Kdata$degree) ~ Kdata$YPD))#normalization
#multiple regression
summary(lm(Kdata$Ka ~ Kdata$YPD + Kdata$degree ))
# First, define a function to calculate Ka difference in pairs of proteins
diff.YPD = function( inpairs ) {
inpairs$K1= Kdata$YPD[match(inpairs$ORF1, Kdata$orfname)];
inpairs$K2= Kdata$YPD[match(inpairs$ORF2, Kdata$orfname)];
ret = mean( abs( inpairs$K1 - inpairs$K2 ), na.rm=T );
}
# calculate the observed difference in Ka
diff.YPD.obs = diff.YPD ( pairs );
paste("Observed YPD = ", diff.YPD.obs);
#I want to use 'sample' to generate permutations.
# Because 'sample' only take a single vector,
# so I need to merge the pairs of interacting genes in two columns
# into a single column.
#permutation of pairs, and their difference in Ka
Nsims = 100; #number of permutations
permutated.diff.YPD = numeric( Nsims ); #empty vector to store calculations
# Now do N simulations
#i =2;
for( i in 1:Nsims ) {
new.pairs = ms02_singlerun(pairs )
new.pairs = new.pairs[,1:2]
names(new.pairs) = c("ORF1", "ORF2")
#calculate delta.K for one random network
permutated.diff.YPD[i] = diff.YPD( new.pairs );
}
head(permutated.diff.YPD)
hist(permutated.diff.YPD)
#Note that this simple permutation does not exclude
# self-pairing. We skip this detail in this excercise, but
# remember that this has to be taken care of
# in actual research work.
# calulate p-value
sub = permutated.diff.YPD[ permutated.diff.YPD <= diff.YPD.obs ]
p.K = length(sub) / length(permutated.diff.YPD);
# generate a figure
hist( permutated.diff.YPD, xlim=c(0.025, 0.035), br=20 );
arrows( diff.YPD.obs, 5, diff.YPD.obs, 2, col="red" );
text( diff.YPD.obs, 5.5, "obs");
###End of permutaion on diff.K
#####################################
### Assignment 2, continued
### use permutation to find out p-value of the
### difference in fitness (YPD) of interacting pairs
### This is equivalent to Figure 3B in Fraser 02, Science.
setwd("~/GoogleDriveCNB331/courses.gd/_CPSC4999/2.lectures/6.fraser.paper/PIN.KaKs")
# First, define a function to calculate Ka difference in pairs of proteins
diff.K = function( inpairs ) {
inpairs$K1= Kdata$Ka[match(inpairs$ORF1, Kdata$orfname)];
inpairs$K2= Kdata$Ka[match(inpairs$ORF2, Kdata$orfname)];
ret = mean( abs( inpairs$K1 - inpairs$K2 ), na.rm=T );
}
# calculate the observed difference in Ka
diff.K.obs = diff.K ( pairs );
paste( "Observed deltaK = ", diff.K.obs);
#permutation of pairs, and their difference in Ka
Nsims = 50; #number of permutations
permutated.diff.K = numeric( Nsims ); #empty vector to store calculations
# Now do N simulations
for( i in 1:Nsims ) {
new.pairs = ms02_singlerun(pairs ) #generate a new MS02 random network
new.pairs = new.pairs[,1:2] #reformating into two-columns
names(new.pairs) = c("ORF1", "ORF2")
#calculate delta.K for one random network
permutated.diff.K[i] = diff.K( new.pairs ); #for null distribution of deltaK
}
head(permutated.diff.K)
hist(permutated.diff.K)
# calulate p-value
sub = permutated.diff.K[ permutated.diff.K <= diff.K.obs ]
p.K = length(sub) / length(permutated.diff.K);
paste("p-value of observed deltaK =", p.K);
# generate Figure 3A
hist( permutated.diff.K, xlim=c(0.025, 0.035), br=20 );
arrows( diff.K.obs, sqrt(Nsims), diff.K.obs, 0.5, col="red" );
text( diff.K.obs, sqrt(Nsims)*1.05, "obs");
View(fit)
