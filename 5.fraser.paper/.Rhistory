require(mvtnorm)
help(package=mvtnorm)
sigma <- matrix(c(1,sqrt(0.5),sqrt(0.5),1), ncol=2)
x <- rmvnorm(n=500, mean=c(0,0), sigma=sigma)
install.packages("Mvtnorm")
verion()
version
install.packages("mvtnorm")
require(mvtnorm)
help(package=mvtnorm)
sigma <- matrix(c(1,sqrt(0.5),sqrt(0.5),1), ncol=2)
x <- rmvnorm(n=500, mean=c(0,0), sigma=sigma)
colMeans(x)
var(x)
summary(lm(x[,1] ~ x[,2]))
require(mvtnorm)
help(package=mvtnorm)
sigma <- matrix(c(1,sqrt(0.5),sqrt(0.5),1), ncol=2)
x <- rmvnorm(n=1E4, mean=c(0,0), sigma=sigma)
colMeans(x)
var(x)
summary(lm(x[,1] ~ x[,2]))
hist( permutated.diff.K, xlim=c(0.025, 0.035), br=20 );
arrows( diff.K.obs, 5, diff.K.obs, 2, col="red" );
text( diff.K.obs, 5.5, "obs");
rm(list=ls())
set.seed(2017)
source('network.r')
#input evolutionary distances
Kdata = read.csv( "Sce.Spa.KaKs.csv");
#input protein interaction pairs
pairs = read.csv("pairs.csv");
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
#input growth fitness
fit = read.csv("growth.fitness.hom.csv");
fit$orf = as.character( fit$orf );
#calculate connecting degrees
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
# summarize the results in a dataframe 'net'
net = data.frame(degree);
str(net);
net$id = as.character( net$id);
#double check
intersect( net$id, Kdata$orfname) [1:10];
#match data and net
Kdata$degree = net$Freq[match(Kdata$orfname, net$id )]
#visual examination to double the merged results
head(Kdata)
net[net$id=='YAL005C', ]
net[net$id=='YAL012W', ]
# find out correlation bw degree and Omega, Ka, Ks
summary(lm(Kdata$Ka ~ Kdata$degree))
#match data and fitness
Kdata$YPD = fit$YPD[match(Kdata$orfname, fit$orf)]
#visual check the merge results
fit[fit$orf=='YAL007C',]
summary(lm(Kdata$Ka ~ Kdata$YPD))
summary(lm(Kdata$degree ~ Kdata$YPD))
summary(lm( log(Kdata$degree) ~ Kdata$YPD))#normalization
#multiple regression
summary(lm(Kdata$Ka ~ Kdata$YPD + Kdata$degree ))
# First, define a function to calculate Ka difference in pairs of proteins
diff.K = function( inpairs ) {
inpairs$K1= Kdata$Ka[match(inpairs$ORF1, Kdata$orfname)];
inpairs$K2= Kdata$Ka[match(inpairs$ORF2, Kdata$orfname)];
ret = mean( abs( inpairs$K1 - inpairs$K2 ), na.rm=T );
}
# calculate the observed difference in Ka
diff.K.obs = diff.K ( pairs );
paste( "Observed deltaK = ", diff.K.obs);
#permutation of pairs, and their difference in Ka
Nsims = 100; #number of permutations
permutated.diff.K = numeric( Nsims ); #empty vector to store calculations
# Now do N simulations
for( i in 1:Nsims ) {
new.pairs = ms02_singlerun(pairs ) #generate a new MS02 random network
new.pairs = new.pairs[,1:2] #reformating into two-columns
names(new.pairs) = c("ORF1", "ORF2")
#calculate delta.K for one random network
permutated.diff.K[i] = diff.K( new.pairs ); #for null distribution of deltaK
}
head(permutated.diff.K)
hist(permutated.diff.K)
# calulate p-value
sub = permutated.diff.K[ permutated.diff.K <= diff.K.obs ]
p.K = length(sub) / length(permutated.diff.K);
paste("p-value of observed deltaK =", p.K);
# generate Figure 3A
hist( permutated.diff.K, xlim=c(0.025, 0.035), br=20 );
arrows( diff.K.obs, 5, diff.K.obs, 2, col="red" );
text( diff.K.obs, 5.5, "obs");
#permutation of pairs, and their difference in Ka
Nsims = 100; #number of permutations
permutated.diff.K = numeric( Nsims ); #empty vector to store calculations
# Now do N simulations
for( i in 1:Nsims ) {
new.pairs = ms02_singlerun(pairs ) #generate a new MS02 random network
new.pairs = new.pairs[,1:2] #reformating into two-columns
names(new.pairs) = c("ORF1", "ORF2")
#calculate delta.K for one random network
permutated.diff.K[i] = diff.K( new.pairs ); #for null distribution of deltaK
}
rm(list=ls())
set.seed(2017)
source('network.r')
#input evolutionary distances
Kdata = read.csv( "Sce.Spa.KaKs.csv");
#input protein interaction pairs
pairs = read.csv("pairs.csv");
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
#input growth fitness
fit = read.csv("growth.fitness.hom.csv");
fit$orf = as.character( fit$orf );
#calculate connecting degrees
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
# summarize the results in a dataframe 'net'
net = data.frame(degree);
str(net);
net$id = as.character( net$id);
#double check
intersect( net$id, Kdata$orfname) [1:10];
#match data and net
Kdata$degree = net$Freq[match(Kdata$orfname, net$id )]
#visual examination to double the merged results
head(Kdata)
net[net$id=='YAL005C', ]
net[net$id=='YAL012W', ]
# find out correlation bw degree and Omega, Ka, Ks
summary(lm(Kdata$Ka ~ Kdata$degree))
#match data and fitness
Kdata$YPD = fit$YPD[match(Kdata$orfname, fit$orf)]
#visual check the merge results
fit[fit$orf=='YAL007C',]
summary(lm(Kdata$Ka ~ Kdata$YPD))
summary(lm(Kdata$degree ~ Kdata$YPD))
summary(lm( log(Kdata$degree) ~ Kdata$YPD))#normalization
#multiple regression
summary(lm(Kdata$Ka ~ Kdata$YPD + Kdata$degree ))
# First, define a function to calculate Ka difference in pairs of proteins
diff.K = function( inpairs ) {
inpairs$K1= Kdata$Ka[match(inpairs$ORF1, Kdata$orfname)];
inpairs$K2= Kdata$Ka[match(inpairs$ORF2, Kdata$orfname)];
ret = mean( abs( inpairs$K1 - inpairs$K2 ), na.rm=T );
}
# calculate the observed difference in Ka
diff.K.obs = diff.K ( pairs );
paste( "Observed deltaK = ", diff.K.obs);
#permutation of pairs, and their difference in Ka
Nsims = 50; #number of permutations
permutated.diff.K = numeric( Nsims ); #empty vector to store calculations
# Now do N simulations
for( i in 1:Nsims ) {
new.pairs = ms02_singlerun(pairs ) #generate a new MS02 random network
new.pairs = new.pairs[,1:2] #reformating into two-columns
names(new.pairs) = c("ORF1", "ORF2")
#calculate delta.K for one random network
permutated.diff.K[i] = diff.K( new.pairs ); #for null distribution of deltaK
}
head(permutated.diff.K)
hist(permutated.diff.K)
# calulate p-value
sub = permutated.diff.K[ permutated.diff.K <= diff.K.obs ]
p.K = length(sub) / length(permutated.diff.K);
paste("p-value of observed deltaK =", p.K);
# generate Figure 3A
hist( permutated.diff.K, xlim=c(0.025, 0.035), br=20 );
arrows( diff.K.obs, sqrt(Nsim), diff.K.obs, 2, col="red" );
# generate Figure 3A
hist( permutated.diff.K, xlim=c(0.025, 0.035), br=20 );
arrows( diff.K.obs, sqrt(Nsims), diff.K.obs, 2, col="red" );
text( diff.K.obs, sqrt(Nsims)*1.05, "obs");
hist( permutated.diff.K, xlim=c(0.025, 0.035), br=20 );
arrows( diff.K.obs, sqrt(Nsims), diff.K.obs, 0.9, col="red" );
text( diff.K.obs, sqrt(Nsims)*1.05, "obs");
hist( permutated.diff.K, xlim=c(0.025, 0.035), br=20 );
arrows( diff.K.obs, sqrt(Nsims), diff.K.obs, 0.5, col="red" );
text( diff.K.obs, sqrt(Nsims)*1.05, "obs");
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
View(Kdata)
pairs = read.csv("pairs.csv");
View(pairs)
# this is the growth fitness data
fitness = read.csv("growth.fitness.hom.csv");
fitness$orf = as.character( fitness$orf );
degree = table( ids );  #tabulate the occurence of each element
# quality check
sum(degree); #check the counting result, the length of ids
length(ids)
degree
degree[1:10]
str(degree)
head(degree)
str(degree)
net = data.frame(degree);
str(net);
net$ids = as.character( net$ids); #make sure gene names are "characters"
View(net)
?match
Kdata$degree = net$Freq[match(Kdata$orfname, net$ids )]
orfnamePositionsInNet = match(Kdata$orfname, net$ids )
net$Distance = Kdata$Ka[match(net$ids, Kdata$orfname)]
View(net)
View(net)
m = lm(Kdata$Ka ~ Kdata$degree);
summary(m)
plot( Kdata$Ka ~ Kdata$degree, xlab='interactions per protein', ylab='evolutionary rate'); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
View(fit)
set.seed(2017)
source('network.r')
rm(list=ls())
library(igraph)
state_pairs= read.csv("48states.csv")
states = read.csv("state_year.csv")
View(state_pairs)
View(states)
state_pairs$state1A = states$abbr[match( state_pairs$state1, states$state)]
state_pairs$state2A = states$abbr[match( state_pairs$state2, states$state)]
g = graph.data.frame(state_pairs[, 3:4], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
plot(g)
summary(states$year)
table(states$year)
year2bin = function( inYear ){
bin = 0;
if ( inYear <= cutoff[1]) {    bin = 1;  }
else if (inYear <= cutoff[2] ) {    bin = 2;  }
else if (inYear <= cutoff[3])  {    bin = 3;  }
else {  bin = 4;  }
return(bin)
}
year2bin(1730)
cutoff = c(1788, 1830, 1888)
cutoff[3]
cutoff = c(1788, 1830, 1888)
cutoff[3]
else if (inYear <= cutoff[2] ) {    bin = 2;  }
year2bin = function( inYear ){
bin = 0;
if ( inYear <= cutoff[1]) {    bin = 1;  }
else if (inYear <= cutoff[2] ) {    bin = 2;  }
else if (inYear <= cutoff[3])  {    bin = 3;  }
else {  bin = 4;  }
return(bin)
}
year2bin(1730)
year2bin(1790)
year2bin(1850)
year2bin(1980)
unlist(lapply(states[, c("year")],  year2bin))
states$bin = unlist(lapply(states[, c("year")],  year2bin))
state_pairs$state1bin = states$bin[match( state_pairs$state1, states$state)]
state_pairs$state2bin = states$bin[match( state_pairs$state2, states$state)]
g2 = graph.data.frame(state_pairs[, c("state1bin","state2bin")], directed=F)
plot(g2)
ms02_pairs= read.csv("48statesMS02/_ms02_48states.1.csv")
ms02_pairs = ms02_pairs[,1:2]
ms02_pairs$id1A = states$abbr[match( ms02_pairs$id1, states$state)]
ms02_pairs$id2A = states$abbr[match( ms02_pairs$id2, states$state)]
ms02_pairs$state1bin = states$bin[match( ms02_pairs$id1, states$state)]
ms02_pairs$state2bin = states$bin[match( ms02_pairs$id2, states$state)]
g.ms02 = graph.data.frame(ms02_pairs[, 3:4], directed=F)
plot(g.ms02)
g2.ms02 = graph.data.frame(ms02_pairs[, c("state1bin","state2bin")], directed=F)
plot(g2.ms02)
rm(list=ls())
library(igraph)
seat_pairs= read.csv("seats.csv")
students = read.csv("students.csv")
View(seat_pairs)
View(students)
g = graph.data.frame(seat_pairs[, 1:2], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
plot(g)
rm(list=ls())
library(igraph)
seat_pairs= read.csv("seats.csv")
students = read.csv("students.csv")
g = graph.data.frame(seat_pairs[, 1:2], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
plot(g)
rm(list=ls())
library(igraph)
seat_pairs= read.csv("seats.csv")
students = read.csv("students.csv")
g = graph.data.frame(seat_pairs[, 1:2], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
plot(g)
table(students$gender)
View(students)
table(students$Gender)
seat_pairs$Gender1 = students$Gender[match( students$Names, seat_pairs$person1)]
seat_pairs$Gender2 = students$Gender[match( students$Names, seat_pairs$person2)]
View(seat_pairs)
seat_pairs$Gender1 = students$Gender[match( students$Names, seat_pairs$person1)]
seat_pairs$Gender2 = students$Gender[match( students$Names, seat_pairs$person2)]
View(seat_pairs)
rm(list=ls())
library(igraph)
seat_pairs= read.csv("seats.csv")
students = read.csv("students.csv")
g = graph.data.frame(seat_pairs[, 1:2], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
plot(g)
g.shortestpath.m = shortest.paths(g)
str(g.shortestpath.m)
sorted.names = sort( rownames(g.shortestpath.m) )
gsm = g.shortestpath.m[, sorted.names]
gsm = gsm[sorted.names, ]
table(students$Gender)
seat_pairs$Gender1 = students$Gender[match( students$Names, seat_pairs$person1)]
seat_pairs$Gender2 = students$Gender[match( students$Names, seat_pairs$person2)]
View(seat_pairs)
students$Gender
students
rm(list=ls())
library(igraph)
seat_pairs= read.csv("seats.csv", colClasses = c("characters", "characters"))
rm(list=ls())
library(igraph)
seat_pairs= read.csv("seats.csv", colClasses = c("character", "character"))
students = read.csv("students.csv", colClasses = c("character", "character"))
g = graph.data.frame(seat_pairs[, 1:2], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
plot(g)
g.shortestpath.m = shortest.paths(g)
str(g.shortestpath.m)
sorted.names = sort( rownames(g.shortestpath.m) )
gsm = g.shortestpath.m[, sorted.names]
gsm = gsm[sorted.names, ]
table(students$Gender)
seat_pairs$Gender1 = students$Gender[match( students$Names, seat_pairs$person1)]
seat_pairs$Gender2 = students$Gender[match( students$Names, seat_pairs$person2)]
View(seat_pairs)
seat_pairs$Gender1 = students$Gender[match( seat_pairs$person1, students$Names)]
seat_pairs$Gender2 = students$Gender[match( seat_pairs$person2, students$Names )]
View(seat_pairs)
g2 = graph.data.frame(state_pairs[, c("state1bin","state2bin")], directed=F)
g2 = graph.data.frame(seat_pairs[, c("Gender1","Gender2")], directed=F)
plot(g2)
permute.pairs.wo.selfpairs = function( inpairs,  ncycles=10, debug=1 ) {
if (ncycles >= 1 ) {
if(debug) {
print(paste('ncycles=', ncycles))
}
longids = c(as.character(inpairs[,1]), as.character(inpairs[,2]) )
longids = sample(longids)
len = length(inpairs[,1])
newpairs = data.frame( cbind( longids[1:len], longids[(len+1): (2*len)]) )
names(newpairs) = c('id1', 'id2')
newpairs$id1 = as.character( newpairs$id1)
newpairs$id2 = as.character( newpairs$id2)
newpairs$selfpairs = ifelse( newpairs$id1 == newpairs$id2, 1, 0 )
self.tb = newpairs[ newpairs$selfpairs==1, ]
nonself.tb = newpairs[newpairs$selfpairs==0, ]
if(debug) {
print(self.tb)
}
if( length(self.tb[,1])>0 ) {
if ( ncycles == 0) { return (c(NA,NA, NA) )
} else {
ncycles = ncycles - 1
selectedpairs = rbind(self.tb,  nonself.tb[1: (length(self.tb[,1])*2), ] )
restpairs = nonself.tb[ (length(self.tb[,1])*2+1): length(nonself.tb[,1]), ]
return( rbind(restpairs, permute.pairs.wo.selfpairs(selectedpairs, ncycles)))
}
} else {
return (newpairs)
}
} else {
return( c(NA,NA,NA ))
}
}
#test
x = permute.pairs.wo.selfpairs(seat_pairs)
plot(x)
View(x)
x = x[ !is.na(x[,1]), 1:2]
View(x)
x = x[ !is.na(x[,1]), 1:2]
g.ms02 = graph.data.frame(x, directed=F)
plot(g.ms02)
View(x)
permute.pairs.wo.selfpairs = function( inpairs,  ncycles=10, debug=5 ) {
if (ncycles >= 1 ) {
if(debug) {
print(paste('ncycles=', ncycles))
}
longids = c(as.character(inpairs[,1]), as.character(inpairs[,2]) )
longids = sample(longids)
len = length(inpairs[,1])
newpairs = data.frame( cbind( longids[1:len], longids[(len+1): (2*len)]) )
names(newpairs) = c('id1', 'id2')
newpairs$id1 = as.character( newpairs$id1)
newpairs$id2 = as.character( newpairs$id2)
newpairs$selfpairs = ifelse( newpairs$id1 == newpairs$id2, 1, 0 )
self.tb = newpairs[ newpairs$selfpairs==1, ]
nonself.tb = newpairs[newpairs$selfpairs==0, ]
if(debug) {
print(self.tb)
}
if( length(self.tb[,1])>0 ) {
if ( ncycles == 0) { return (c(NA,NA, NA) )
} else {
ncycles = ncycles - 1
selectedpairs = rbind(self.tb,  nonself.tb[1: (length(self.tb[,1])*2), ] )
restpairs = nonself.tb[ (length(self.tb[,1])*2+1): length(nonself.tb[,1]), ]
return( rbind(restpairs, permute.pairs.wo.selfpairs(selectedpairs, ncycles)))
}
} else {
return (newpairs)
}
} else {
return( c(NA,NA,NA ))
}
}
#test
x = permute.pairs.wo.selfpairs(seat_pairs)
View(x)
x = x[ !is.na(x[,1]), 1:2]
g.ms02 = graph.data.frame(x, directed=F)
plot(g.ms02)
