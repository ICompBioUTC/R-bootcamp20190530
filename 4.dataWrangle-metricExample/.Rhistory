plot( tb$Amount ~ tb$Hours );
# a better plot
plot( Amount ~ Hours, data=tb );
plot( Amount ~ Hours, data=tb, type="b",
main="Carlson growth curve" );
##### the second data set, multiple plots
tb2 = read.csv( "Carlson2.csv" );
##first try, not pretty
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red" );
##add legends
legend(2,500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1) )
install.packages("seqinr")
library(seqinr);
# read in some bacterial 16s rDNA sequences
seqs = read.fasta(   "http://www.bioinformatics.org/ctls/download/data/16srDNA.fasta",
seqtype="DNA");
rm(list=ls())
library(seqinr);
seqs = read.fasta(   "http://www.bioinformatics.org/ctls/download/data/16srDNA.fasta",
seqtype="DNA");
str(seqs);
seqs[1]
seqs[1][1]
x = seqs[1][1]
str(x)
x = seqs[[1]]
str(x)
table( seq1 ); #nucleotide composition
seq1 = seqs[[1]]
table( seq1 ); #nucleotide composition
length(seq1)
sum(table(seq1))
365 + 325 + 432 + 28 + 300
28/1450
GC(seq1);  # GC content
(325+432)/1450
(325+432)/(1450-28)
num = 1:length(seqs); #these are storages for later use
gc  = 1:length(seqs); # gc = num;
out = data.frame( cbind( num, gc ) );
out2 = cbind(num, gc)
for( i in 1:length(seqs) ) {
out$gc[i] = GC( seqs[[i]] );
}
View(out)
num = 1:length(seqs);
out2 = data.frame( cbind( num) );
View(out2)
for( i in 1:length(seqs) ) {
out2$name[i] = attributes( seqs[[i]] )$name
out2$gc[i] = GC( seqs[[i]] );
}
num = 1:length(seqs);
out2 = data.frame( cbind( num) );
View(out2)
for( i in 1:length(seqs) ) {
out2$name[i] = attributes( seqs[[i]] )$name
out2$gc[i] = GC( seqs[[i]] );
}
View(out2)
num = 1:length(seqs);
out3 = data.frame( cbind( num) );
for( i in 1:length(seqs) ) {
out3$name[i] = attributes( seqs[[i]] )$name
out3$len[i] = length( seqs[[i]] );  ### remove this
out3$gc[i] = GC( seqs[[i]] );
}
View(out3)
setwd("~/GoogleDriveCNB331/courses.gd/_CPSC4999/2.lectures/4.metric.example")
list.files()
# colClass specify that all columns will be treated as characters for now.
tb.ori = read.csv("metric_survey_data.csv", colClass=rep("character", 24))
?str
str(tb.ori);
tb.ori$Timestamp
tb = tb.ori  #make a copy because we will modify the table.
rm(list=ls())
list.files()
# colClass specify that all columns will be treated as characters for now.
tb.ori = read.csv("metric_survey_data.csv", colClass=rep("character", 24))
?str
str(tb.ori);
tb.ori$Timestamp
tb = tb.ori  #make a copy because we will modify the table.
View(tb.ori)
names(tb.ori)
?names
#rename the columns with shortter names for convenience
names(tb) = c("time","gender", "age", "degree", "country", "light", "shaq", "fossil", "kilo", "mm",
"food","inseam", "weather","electronCharge","earlyHuman",
"laser", "continents", "antibiotics", "electronSize","earthCenter",
"religiousView","dailyLife","SciOnLife", "SciEffect")
str(tb)
cbind (names(tb), substr(names(tb.ori), 1, 20))
View(tb)
#indexing features of R
tb[1:5, 2:3]
tb$age #what does mean?
#tb$age[?] #try for 5th row in age
#correct some input errors
# If there is no input of 'age'
tb$age[is.na(tb$age)] = 'Do not wish to answer'
table(tb$age)
?table
# If there is no input of 'age'
tb$degree [is.na(tb$degree)] = 'Do not wish to answer'
table(tb$degree)
tb$gender[tb$gender=='']='Do not wish to answer'
table(tb$gender)
# dealing with missing values, add 'NA' to empty answers
# nested for-loops
for( i in 1:length(tb[, 1])) {  #outter for-loop, i for row, from 1 to the last row
for( j in 5:length(tb[1, ])) {  #inner for-loop, j for column, from 5th to the last column
print( paste("i=", i, "j=", j) )
}
}
#if there is empty cell, we assign a missing value 'NA' there
for( i in 1:length(tb[, 1])) {  #outter for-loop , by row
for( j in 5:length(tb[1, ])) {  #inner for-loop, by column
if ( is.na(tb[i, j]) ) {
# do nothing
} else if (tb[i,j]=='') {
tb[i,j] = NA #This is R's way to deal with missing value
}
}
}
tb2 = tb[ ,c(2,4,5)]  #this is the score table, empty space before comma indicate every row
head(tb2)
head(tb2)
tb2 = tb[ ,c(2,4,5)]  #this is the score table, empty space before comma indicate every row
head(tb2)
tb2$age = NA
tb2$age[grep("18-22", tb$age)] = 18/2 + 22/2
tb2$age[grep("23-30", tb$age)] = 23/2 + 30/2
tb2$age[grep("31-40", tb$age)] = 31/2 + 40/2
tb2$age[grep("41-50", tb$age)] = 41/2 + 50/2
tb2$age[grep("51-55", tb$age)] = 51/2 + 55/2
tb2$age[grep("56-60", tb$age)] = 56/2 + 60/2
str(tb2$age)
table(tb$age) #table is a very useful function (command) for
table(tb2$age)
summary(tb2$age)
table(tb2$age, tb2$gender)
boxplot( tb2$age ~ tb2$gender)
boxplot( tb2$age ~ tb2$gender)
dev.off()
boxplot( tb2$age ~ tb2$gender)
#histogram of age
hist(tb2$age)
dev.off()
hist(tb2$age)
table( tb$country )  #All the inputed 'countries'
###country
table( tb$country )  #All the inputed 'countries'
tb2$country = 0  #for non-USA countries
tb2$country[tb$country=='United States'] = 1
table( tb2$country )
##### create a second table, convert character values to numerical values
tb2 = tb[ ,c(2,4,5)]  #this is the score table, empty space before comma indicate every row
head(tb2)
#calculate the average age for each category
?grep #This is not GRE prep. This is pattern match.
# grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,
#     fixed = FALSE, useBytes = FALSE, invert = FALSE)
tb2$age = NA
tb2$age[grep("18-22", tb$age)] = 18/2 + 22/2
tb2$age[grep("23-30", tb$age)] = 23/2 + 30/2
tb2$age[grep("31-40", tb$age)] = 31/2 + 40/2
tb2$age[grep("41-50", tb$age)] = 41/2 + 50/2
tb2$age[grep("51-55", tb$age)] = 51/2 + 55/2
tb2$age[grep("56-60", tb$age)] = 56/2 + 60/2
#> grep("56-60", tb$age)
# [1]   6  12  84  88 104 112 129 130 131 132 133 156 162 163 185 216 219
tb2$age[grep("More than 60 years", tb$age)] = 65
table(tb$age) #table is a very useful function (command) for tabulation
table(tb2$age)
summary(tb2$age)
#Visualize the data
table(tb2$age, tb2$gender)
boxplot( tb2$age ~ tb2$gender)
#histogram of age
hist(tb2$age)
###country
table( tb$country )  #All the inputed 'countries'
tb2$country = 0  #for non-USA countries
tb2$country[tb$country=='United States'] = 1
table( tb2$country )
#have a look at some entries
head(tb2)
#double-check the columns
names(tb2)
rm(list=ls())
list.files()
# colClass specify that all columns will be treated as characters for now.
tb.ori = read.csv("metric_survey_data.csv", colClass=rep("character", 24))
?str
str(tb.ori);
tb.ori$Timestamp
tb = tb.ori  #make a copy because we will modify the table.
names(tb.ori)
?names
#rename the columns with shortter names for convenience
names(tb) = c("time","gender", "age", "degree", "country", "light", "shaq", "fossil", "kilo", "mm",
"food","inseam", "weather","electronCharge","earlyHuman",
"laser", "continents", "antibiotics", "electronSize","earthCenter",
"religiousView","dailyLife","SciOnLife", "SciEffect")
str(tb)
cbind (names(tb), substr(names(tb.ori), 1, 20))
?cbind
#indexing features of R
tb[1:5, 2:3]
tb$age #what does mean?
#tb$age[?] #try for 5th row in age
#correct some input errors
# If there is no input of 'age'
tb$age[is.na(tb$age)] = 'Do not wish to answer'
table(tb$age)
?table
# If there is no input of 'age'
tb$degree [is.na(tb$degree)] = 'Do not wish to answer'
table(tb$degree)
tb$gender[tb$gender=='']='Do not wish to answer'
table(tb$gender)
# dealing with missing values, add 'NA' to empty answers
# nested for-loops
for( i in 1:length(tb[, 1])) {  #outter for-loop, i for row, from 1 to the last row
for( j in 5:length(tb[1, ])) {  #inner for-loop, j for column, from 5th to the last column
print( paste("i=", i, "j=", j) )
}
}
#if there is empty cell, we assign a missing value 'NA' there
for( i in 1:length(tb[, 1])) {  #outter for-loop , by row
for( j in 5:length(tb[1, ])) {  #inner for-loop, by column
if ( is.na(tb[i, j]) ) {
# do nothing
} else if (tb[i,j]=='') {
tb[i,j] = NA #This is R's way to deal with missing value
}
}
}
##### create a second table, convert character values to numerical values
tb2 = tb[ ,c(2,4,5)]  #this is the score table, empty space before comma indicate every row
head(tb2)
#calculate the average age for each category
?grep #This is not GRE prep. This is pattern match.
# grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,
#     fixed = FALSE, useBytes = FALSE, invert = FALSE)
tb2$age = NA
tb2$age[grep("18-22", tb$age)] = 18/2 + 22/2
tb2$age[grep("23-30", tb$age)] = 23/2 + 30/2
tb2$age[grep("31-40", tb$age)] = 31/2 + 40/2
tb2$age[grep("41-50", tb$age)] = 41/2 + 50/2
tb2$age[grep("51-55", tb$age)] = 51/2 + 55/2
tb2$age[grep("56-60", tb$age)] = 56/2 + 60/2
#> grep("56-60", tb$age)
# [1]   6  12  84  88 104 112 129 130 131 132 133 156 162 163 185 216 219
tb2$age[grep("More than 60 years", tb$age)] = 65
table(tb$age) #table is a very useful function (command) for tabulation
table(tb2$age)
summary(tb2$age)
#Visualize the data
table(tb2$age, tb2$gender)
boxplot( tb2$age ~ tb2$gender)
#histogram of age
hist(tb2$age)
###country
table( tb$country )  #All the inputed 'countries'
tb2$country = 0  #for non-USA countries
tb2$country[tb$country=='United States'] = 1
table( tb2$country )
#have a look at some entries
head(tb2)
#double-check the columns
names(tb2)
### Here are the columns for the 3 categories
metrics = c("shaq", "kilo", "mm", "inseam", "weather")
sciLiteracy = c("light", "fossil", "food", "electronCharge",
"earlyHuman", "laser", "continents", "antibiotics",
"electronSize", "earthCenter")
sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
##### create a second table, convert character values to numerical values
tb2 = tb[ ,c(2,4,5)]  #this is the score table, empty space before comma indicate every row
head(tb2)
#calculate the average age for each category
?grep #This is not GRE prep. This is pattern match.
# grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,
#     fixed = FALSE, useBytes = FALSE, invert = FALSE)
tb2$age = NA
tb2$age[grep("18-22", tb$age)] = 18/2 + 22/2
tb2$age[grep("23-30", tb$age)] = 23/2 + 30/2
tb2$age[grep("31-40", tb$age)] = 31/2 + 40/2
tb2$age[grep("41-50", tb$age)] = 41/2 + 50/2
tb2$age[grep("51-55", tb$age)] = 51/2 + 55/2
tb2$age[grep("56-60", tb$age)] = 56/2 + 60/2
#> grep("56-60", tb$age)
# [1]   6  12  84  88 104 112 129 130 131 132 133 156 162 163 185 216 219
tb2$age[grep("More than 60 years", tb$age)] = 65
table(tb$age) #table is a very useful function (command) for tabulation
table(tb2$age)
summary(tb2$age)
#Visualize the data
table(tb2$age, tb2$gender)
boxplot( tb2$age ~ tb2$gender)
#histogram of age
hist(tb2$age)
###country
table( tb$country )  #All the inputed 'countries'
tb2$country = 0  #for non-USA countries
tb2$country[tb$country=='United States'] = 1
table( tb2$country )
#have a look at some entries
head(tb2)
#double-check the columns
names(tb2)
dev.off()
##### create a second table, convert character values to numerical values
tb2 = tb[ ,c(2,4,5)]  #this is the score table, empty space before comma indicate every row
head(tb2)
#calculate the average age for each category
?grep #This is not GRE prep. This is pattern match.
# grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,
#     fixed = FALSE, useBytes = FALSE, invert = FALSE)
tb2$age = NA
tb2$age[grep("18-22", tb$age)] = 18/2 + 22/2
tb2$age[grep("23-30", tb$age)] = 23/2 + 30/2
tb2$age[grep("31-40", tb$age)] = 31/2 + 40/2
tb2$age[grep("41-50", tb$age)] = 41/2 + 50/2
tb2$age[grep("51-55", tb$age)] = 51/2 + 55/2
tb2$age[grep("56-60", tb$age)] = 56/2 + 60/2
#> grep("56-60", tb$age)
# [1]   6  12  84  88 104 112 129 130 131 132 133 156 162 163 185 216 219
tb2$age[grep("More than 60 years", tb$age)] = 65
table(tb$age) #table is a very useful function (command) for tabulation
table(tb2$age)
summary(tb2$age)
#Visualize the data
table(tb2$age, tb2$gender)
boxplot( tb2$age ~ tb2$gender)
#histogram of age
hist(tb2$age)
###country
table( tb$country )  #All the inputed 'countries'
tb2$country = 0  #for non-USA countries
tb2$country[tb$country=='United States'] = 1
table( tb2$country )
#have a look at some entries
head(tb2)
#double-check the columns
names(tb2)
### Here are the columns for the 3 categories
metrics = c("shaq", "kilo", "mm", "inseam", "weather")
sciLiteracy = c("light", "fossil", "food", "electronCharge",
"earlyHuman", "laser", "continents", "antibiotics",
"electronSize", "earthCenter")
sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
tb2$shaq = 0.5
tb2$shaq[ tb$shaq=='Yes' ] = 1
tb2$shaq[ tb$shaq=='No' ] = 0
table(tb2$shaq)
tb2$kilo = 0
tb2$kilo[ tb$kilo=='1000 x' ] = 1
table(tb2$kilo)
tb2$mm=0
tb2$mm[ tb$mm==0.145 ] = 1
table(tb2$mm)
table(tb$mm)
tb2$inseam = 0.5
tb2$inseam[tb$inseam=="This person is short"] = 1
tb2$inseam[tb$inseam=="This person is tall"] = 0
table(tb2$inseam)
tb2$weather = 0.5
tb2$weather[tb$weather=="A Short sleeve shirt"] = 1
tb2$weather[tb$weather=="A winter coat"] = 0
table(tb$weather)
table(tb2$weather)
######### summarize the metric proficiency score
#metrics = c("shaq", "kilo", "mm", "inseam", "weather")
#metric total score
tb2$metric = apply( tb2[, metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=20)
#sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
# "My religious views are more important than scientific views
tb2$religiousView = 0.5
tb2$religiousView[grep("No", tb$religiousView)] = 1
tb2$religiousView[grep("Yes", tb$religiousView)] = 0
table(tb2$religiousView)
table(tb$religiousView)
# "For me, in my daily life, it is not important to know about science"
tb2$dailyLife = 0.5
tb2$dailyLife[ tb$dailyLife=='TRUE' ] = 0
tb2$dailyLife[ tb$dailyLife=='FALSE' ] = 1
table(tb2$dailyLife)
# "Science and technology are making our lives healthiers, easiers and more comfortable."
tb2$SciOnLife = 0.5
tb2$SciOnLife[ tb$SciOnLife=='TRUE' ] = 1
tb2$SciOnLife[ tb$SciOnLife=='FALSE' ] = 0
table(tb2$SciOnLife)
# "The benefits of sciences are greaters than any harmful effects that it may have."
tb2$SciEffect = 0.5
tb2$SciEffect[ tb$SciEffect=='TRUE' ] = 1
tb2$SciEffect[ tb$SciEffect=='FALSE' ] = 0
table( tb2$SciEffect )
#sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
#Attitude total score
tb2$SciAttitude = apply( tb2[, sciAttitude], MARGIN=1, FUN=sum)
hist(tb2$SciAttitude, br=20)
#sciLiteracy = c("light", "fossil", "food", "electronCharge",
#                "earlyHuman", "laser", "continents", "antibiotics", "electronSize", "earthCenter")
tb2$light = 0.5
tb2$light[ tb$light=='TRUE' ] =1
tb2$light[ tb$light=='Wrong' ] =0
table(tb$light)
table(tb2$light)
tb2$fossil = 0.5
tb2$fossil[ tb$fossil=='6 million and 5 years old' ] = 0
tb2$fossil[grep('Still', tb$fossil)] = 1;
table(tb$fossil)
table(tb2$fossil)
tb2$food = 0.5
tb2$food[ tb$food=='Dis-agree' ] = 1
tb2$food[grep('Agree', tb$food)] = 0;
table(tb$food)
table(tb2$food)
tb2$electronCharge = 0
tb2$electronCharge[grep('Positive', tb$electronCharge)] = 1;
table(tb$electronCharge)
table(tb2$electronCharge)
tb2$earlyHuman = 0.5
tb2$earlyHuman[grep('TRUE', tb$earlyHuman)] = 0;
tb2$earlyHuman[grep('FALSE', tb$earlyHuman)] = 1;
table(tb$earlyHuman)
table(tb2$earlyHuman)
tb2$earlyHuman = 0.5
tb2$earlyHuman[grep('TRUE', tb$earlyHuman)] = 0;
tb2$earlyHuman[grep('FALSE', tb$earlyHuman)] = 1;
table(tb$earlyHuman)
table(tb2$earlyHuman)
tb2$laser = 0.5
tb2$laser[grep('TRUE', tb$laser)] = 0;
tb2$laser[grep('FALSE', tb$laser)] = 1;
table(tb$laser)
table(tb2$laser)
tb2$continents = 0.5
tb2$continents[grep('TRUE', tb$continents)] = 1;
tb2$continents[grep('FALSE', tb$continents)] = 0;
table(tb$continents)
table(tb2$continents)
tb2$antibiotics = 0.5
tb2$antibiotics[grep('TRUE', tb$antibiotics)] = 0;
tb2$antibiotics[grep('FALSE', tb$antibiotics)] = 1;
table(tb$antibiotics)
table(tb2$antibiotics)
tb2$electronSize = 0.5
tb2$electronSize[grep('True', tb$electronSize)] = 1;
tb2$electronSize[grep('FALSE', tb$electronSize)] = 0;
table(tb$electronSize)
table(tb2$electronSize)
tb2$earthCenter = 0.5
tb2$earthCenter[grep('TRUE', tb$earthCenter)] = 1;
tb2$earthCenter[grep('FALSE', tb$earthCenter)] = 0;
table(tb$earthCenter)
table(tb2$earthCenter)
#sciLiteracy = c("light", "fossil", "food", "electronCharge",
#                "earlyHuman", "laser", "continents", "antibiotics", "electronSize", "earthCenter")
tb2$SciLitScore = apply( tb2[, sciLiteracy], MARGIN=1, FUN=sum ) #by row
hist(tb2$SciLitScore, br=20)
boxplot( tb2$metric ~ tb2$gender, ylab="metric proficiency" )
t.test(tb2$metric[tb2$gender=='Female'], tb2$metric[tb2$gender=='Male'])
#Does this mean that females are more uncomfortable with metric usage?
# Female participants tend to be younger
boxplot( tb2$age ~ tb2$gender, ylab='age')
# More female participants with Bachelor degrees
table( tb2$gender, tb2$degree )
boxplot( tb2$metric ~ tb2$degree, ylab='metric proficiency')
# Multiple regression
m1 = lm( tb2$metric ~ tb2$degree )
summary(m1)
m2 = lm( tb2$metric ~ tb2$age )
summary(m2)
m3 = lm( tb2$metric~ tb2$gender + tb2$degree + tb2$age )
summary(m3)
t.test(tb2$metric[tb2$gender=='Female'], tb2$metric[tb2$gender=='Male'])
#Does this mean that females are more uncomfortable with metric usage?
m1 = lm( tb2$metric ~ tb2$gender )
summary(m1)
m1 = lm( tb2$metric ~ tb2$degree )
summary(m1)
m2 = lm( tb2$metric ~ tb2$age )
summary(m2)
m3 = lm( tb2$metric~ tb2$gender + tb2$degree + tb2$age )
summary(m3)
tb2 = tb2[!is.na(tb2$age), ]
summary(tb2)
str(tb2);
pairs(tb2[, c("metric", "SciLitScore", "SciAttitude")])
dev.off()
pairs(tb2[, c("metric", "SciLitScore", "SciAttitude")])
summary(lm(tb2$SciLitScore ~ tb2$metric )) #significant
summary(lm(tb2$SciAttitude ~ tb2$metric )) #significant
summary(lm(tb2$SciAttitude ~ tb2$SciLitScore ))
summary(lm(tb2$SciAttitude ~ tb2$age )) #significant
summary(lm(tb2$metric ~ tb2$age )) #significant
summary(lm(tb2$SciAttitude ~ tb2$SciLitScore + tb2$metric )) #significant
summary(lm(tb2$SciAttitude ~ tb2$SciLitScore + tb2$metric + tb2$age )) #significant
summary(lm(tb2$SciAttitude ~ tb2$SciLitScore + tb2$metric + tb2$age +tb2$degree )) #significant
summary(lm(tb2$SciAttitude ~ tb2$metric + tb2$age + tb2$gender + tb2$country  )) #age is signicant!!!
